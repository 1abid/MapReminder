apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: "jacoco"

android {
    signingConfigs {
        signing_config {
            keyAlias 'vutkabilai'
            keyPassword '123456'
            storeFile file('/Volumes/workstations/key_passws/remind_map')
            storePassword 'bijGittu2'
        }
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.bus.green.mapreminder"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_KEY", "\"$appMapsApiKeyRelease\""
            resValue 'string', "api_key", "\"$appMapsApiKeyRelease\""
        }

        debug{
            minifyEnabled false
            testCoverageEnabled true
            buildConfigField "String", "API_KEY", "\"$appMapsApiKeyDebug\""
            resValue 'string', "api_key", "\"$appMapsApiKeyDebug\""
        }
    }

    testOptions {
        junitPlatform {
            details "none"
            jacocoOptions {
                html {
                    enabled true
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.google.android.material:material:$rootProject.designVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.androidXVersion"
    implementation "androidx.cardview:cardview:$rootProject.androidXVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.androidXVersion"
    implementation "androidx.constraintlayout:constraintlayout:1.1.2"
    implementation "com.google.code.gson:gson:2.8.5"

    // Navigation
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"
    implementation "android.arch.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    implementation "android.arch.navigation:navigation-ui-ktx:$rootProject.navigationVersion"

    //room
    implementation "androidx.room:room-runtime:$rootProject.room_version"
    kapt "androidx.room:room-compiler:$rootProject.room_version"
    testImplementation "androidx.room:room-testing:$rootProject.room_version"

    //coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.coroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutineVersion"


    //map
    implementation "com.google.android.gms:play-services-maps:$rootProject.play_service_version"
    implementation "com.google.android.gms:play-services-location:$rootProject.play_service_version"

    //time
    implementation "com.jakewharton.threetenabp:threetenabp:$rootProject.threeTenBPVersion"

    //lottie-animation
    implementation "com.airbnb.android:lottie:$rootProject.lottieVersion"

    //test
    androidTestImplementation "androidx.test:runner:$rootProject.instrumentTestVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.instrumentTestVersion"
    androidTestImplementation "org.hamcrest:hamcrest-library:$rootProject.hamchrestVersion"
    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:$rootProject.jupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$rootProject.jupiterVersion"
    testImplementation "org.assertj:assertj-core:$rootProject.asserJVersion"
    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$rootProject.jupiterVersion"
    // (Optional) If you also have JUnit 4-based tests
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$rootProject.jupiterVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$rootProject.mockServerVersion"
}


task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // what to exclude from coverage report
    // UI, "noise", generated classes, platform classes, etc.
    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*'
    ]
    // generated classes
    classDirectories = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludes
    ) + fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes
    )

    // sources
    sourceDirectories = files([
            android.sourceSets.main.java.srcDirs,
            "src/main/kotlin"
    ])
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")
}

